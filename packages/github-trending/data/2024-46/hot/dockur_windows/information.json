{
  "name": "dockur/windows",
  "description": "Windows inside a Docker container.",
  "stars": 28879,
  "forks": 1974,
  "watchers": 28879,
  "mainLanguage": "Shell",
  "languages": {
    "Shell": 166382,
    "Dockerfile": 1195
  },
  "topics": [
    "docker",
    "docker-container",
    "virtualization",
    "windows",
    "windows-virtual-desktop",
    "windows-virtual-machine",
    "windows-virtual-machines",
    "windows-vm"
  ],
  "readme": "<h1 align=\"center\">Windows<br />\n<div align=\"center\">\n<a href=\"https://github.com/dockur/windows\"><img src=\"https://github.com/dockur/windows/raw/master/.github/logo.png\" title=\"Logo\" style=\"max-width:100%;\" width=\"128\" /></a>\n</div>\n<div align=\"center\">\n\n[![Build]][build_url]\n[![Version]][tag_url]\n[![Size]][tag_url]\n[![Package]][pkg_url]\n[![Pulls]][hub_url]\n\n</div></h1>\n\nWindows inside a Docker container.\n\n## Features ✨\n\n - ISO downloader\n - KVM acceleration\n - Web-based viewer\n\n## Video 📺\n\n[![Youtube](https://img.youtube.com/vi/xhGYobuG508/0.jpg)](https://www.youtube.com/watch?v=xhGYobuG508)\n\n## Usage 🐳\n\nVia Docker Compose:\n\n```yaml\nservices:\n  windows:\n    image: dockurr/windows\n    container_name: windows\n    environment:\n      VERSION: \"11\"\n    devices:\n      - /dev/kvm\n    cap_add:\n      - NET_ADMIN\n    ports:\n      - 8006:8006\n      - 3389:3389/tcp\n      - 3389:3389/udp\n    stop_grace_period: 2m\n```\n\nVia Docker CLI:\n\n```bash\ndocker run -it --rm -p 8006:8006 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 dockurr/windows\n```\n\nVia Kubernetes:\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/dockur/windows/refs/heads/master/kubernetes.yml\n```\n\n## Compatibility ⚙️\n\n| **Product**  | **Platform**   | |\n|---|---|---|\n| Docker Engine | Linux| ✅ |\n| Docker Desktop | Linux | ❌ |\n| Docker Desktop | macOS | ❌ |\n| Docker Desktop | Windows 11 | ✅ |\n| Docker Desktop | Windows 10 | ❌ |\n\n## FAQ 💬\n\n### How do I use it?\n\n  Very simple! These are the steps:\n  \n  - Start the container and connect to [port 8006](http://localhost:8006) using your web browser.\n\n  - Sit back and relax while the magic happens, the whole installation will be performed fully automatic.\n\n  - Once you see the desktop, your Windows installation is ready for use.\n  \n  Enjoy your brand new machine, and don't forget to star this repo!\n\n### How do I select the Windows version?\n\n  By default, Windows 11 will be installed. But you can add the `VERSION` environment variable to your compose file, in order to specify an alternative Windows version to be downloaded:\n\n  ```yaml\n  environment:\n    VERSION: \"11\"\n  ```\n\n  Select from the values below:\n  \n  | **Value** | **Version**           | **Size** |\n  |---|---|---|\n  | `11`   | Windows 11 Pro           | 5.4 GB   |\n  | `11l`  | Windows 11 LTSC          | 4.2 GB   |\n  | `11e`  | Windows 11 Enterprise    | 5.8 GB   |\n  ||||\n  | `10`   | Windows 10 Pro           | 5.7 GB   |\n  | `10l`  | Windows 10 LTSC          | 4.6 GB   |\n  | `10e`  | Windows 10 Enterprise    | 5.2 GB   |\n  ||||\n  | `8e`   | Windows 8.1 Enterprise   | 3.7 GB   |\n  | `7e`   | Windows 7 Enterprise     | 3.0 GB   |\n  | `ve`   | Windows Vista Enterprise | 3.0 GB   |\n  | `xp`   | Windows XP Professional  | 0.6 GB   |\n  ||||\n  | `2025` | Windows Server 2025      | 5.0 GB   |\n  | `2022` | Windows Server 2022      | 4.7 GB   |\n  | `2019` | Windows Server 2019      | 5.3 GB   |\n  | `2016` | Windows Server 2016      | 6.5 GB   |\n  | `2012` | Windows Server 2012      | 4.3 GB   |\n  | `2008` | Windows Server 2008      | 3.0 GB   |\n  | `2003` | Windows Server 2003      | 0.6 GB   |\n\n> [!TIP]\n> To install ARM64 versions of Windows use [dockur/windows-arm](https://github.com/dockur/windows-arm/).\n\n### How do I change the storage location?\n\n  To change the storage location, include the following bind mount in your compose file:\n\n  ```yaml\n  volumes:\n    - /var/win:/storage\n  ```\n\n  Replace the example path `/var/win` with the desired storage folder.\n\n### How do I change the size of the disk?\n\n  To expand the default size of 64 GB, add the `DISK_SIZE` setting to your compose file and set it to your preferred capacity:\n\n  ```yaml\n  environment:\n    DISK_SIZE: \"256G\"\n  ```\n  \n> [!TIP]\n> This can also be used to resize the existing disk to a larger capacity without any data loss.\n\n### How do I share files with the host?\n\n  Open 'File Explorer' and click on the 'Network' section, you will see a computer called `host.lan`. Double-click it and it will show a folder called `Data`, which can be bound to any folder on your host via the compose file:\n\n  ```yaml\n  volumes:\n    -  /home/user/example:/data\n  ```\n\n  The example folder `/home/user/example` will be available as ` \\\\host.lan\\Data`.\n  \n> [!TIP]\n> You can map this path to a drive letter in Windows, for easier access.\n\n### How do I install a custom image?\n\n  In order to download an unsupported ISO image that is not selectable from the list above, specify the URL of that ISO in the `VERSION` environment variable, for example:\n  \n  ```yaml\n  environment:\n    VERSION: \"https://example.com/win.iso\"\n  ```\n\n  Alternatively, you can also skip the download and use a local file instead, by binding it in your compose file in this way:\n  \n  ```yaml\n  volumes:\n    - /home/user/example.iso:/custom.iso\n  ```\n\n  Replace the example path `/home/user/example.iso` with the filename of your desired ISO file, the value of `VERSION` will be ignored in this case.\n\n### How do I run a script after installation?\n\n  To run your own script after installation, you can create a file called `install.bat` and place it in a folder together with any additional files it needs (software to be installed for example). Then bind that folder in your compose file like this:\n\n  ```yaml\n  volumes:\n    -  /home/user/example:/oem\n  ```\n\n  The example folder `/home/user/example` will be copied to `C:\\OEM` during installation and the containing `install.bat` will be executed during the last step.\n\n### How do I perform a manual installation?\n\n  It's best to stick to the automatic installation, as it adjusts various settings to prevent common issues when running Windows inside a virtual environment.\n\n  However, if you insist on performing the installation manually, add the following environment variable to your compose file:\n\n  ```yaml\n  environment:\n    MANUAL: \"Y\"\n  ```\n\n### How do I change the amount of CPU or RAM?\n\n  By default, the container will be allowed to use a maximum of 2 CPU cores and 4 GB of RAM.\n\n  If you want to adjust this, you can specify the desired amount using the following environment variables:\n\n  ```yaml\n  environment:\n    RAM_SIZE: \"8G\"\n    CPU_CORES: \"4\"\n  ```\n\n### How do I configure the username and password?\n\n  By default, a user called `Docker` is created during the installation, with an empty password.\n\n  If you want to use different credentials, you can change them in your compose file:\n\n  ```yaml\n  environment:\n    USERNAME: \"bill\"\n    PASSWORD: \"gates\"\n  ```\n\n### How do I select the Windows language?\n\n  By default, the English version of Windows will be downloaded. But you can add the `LANGUAGE` environment variable to your compose file, in order to specify an alternative language:\n\n  ```yaml\n  environment:\n    LANGUAGE: \"French\"\n  ```\n  \n  You can choose between: 🇦🇪 Arabic, 🇧🇬 Bulgarian, 🇨🇳 Chinese, 🇭🇷 Croatian, 🇨🇿 Czech, 🇩🇰 Danish, 🇳🇱 Dutch, 🇬🇧 English, 🇪🇪 Estonian, 🇫🇮 Finnish, 🇫🇷 French, 🇩🇪 German, 🇬🇷 Greek, 🇮🇱 Hebrew, 🇭🇺 Hungarian, 🇮🇹 Italian, 🇯🇵 Japanese, 🇰🇷 Korean, 🇱🇻 Latvian, 🇱🇹 Lithuanian, 🇳🇴 Norwegian, 🇵🇱 Polish, 🇵🇹 Portuguese, 🇷🇴 Romanian, 🇷🇺 Russian, 🇷🇸 Serbian, 🇸🇰 Slovak, 🇸🇮 Slovenian, 🇪🇸 Spanish, 🇸🇪 Swedish, 🇹🇭 Thai, 🇹🇷 Turkish and 🇺🇦 Ukrainian.\n\n### How do I select the keyboard layout?\n\n  If you want to use a keyboard layout or locale that is not the default for your selected language, you can add the `KEYBOARD` and `REGION` variables with a culture code, like this:\n\n  ```yaml\n  environment:\n    REGION: \"en-US\"\n    KEYBOARD: \"en-US\"\n  ```\n\n> [!NOTE]  \n>  Changing these values will have no effect after the installation has been performed already. Use the control panel inside Windows in that case.\n>\n\n### How do I connect using RDP?\n\n  The web-viewer is mainly meant to be used during installation, as its picture quality is low, and it has no audio or clipboard for example.\n\n  So for a better experience you can connect using any Microsoft Remote Desktop client to the IP of the container, using the username `Docker` and by leaving the password empty.\n\n  There is a RDP client for [Android](https://play.google.com/store/apps/details?id=com.microsoft.rdc.androidx) available from the Play Store and one for [iOS](https://apps.apple.com/nl/app/microsoft-remote-desktop/id714464092?l=en-GB) in the Apple Store. For Linux you can use [FreeRDP](https://www.freerdp.com/) and on Windows just type `mstsc` in the search box.\n\n### How do I assign an individual IP address to the container?\n\n  By default, the container uses bridge networking, which shares the IP address with the host. \n\n  If you want to assign an individual IP address to the container, you can create a macvlan network as follows:\n\n  ```bash\n  docker network create -d macvlan \\\n      --subnet=192.168.0.0/24 \\\n      --gateway=192.168.0.1 \\\n      --ip-range=192.168.0.100/28 \\\n      -o parent=eth0 vlan\n  ```\n  \n  Be sure to modify these values to match your local subnet. \n\n  Once you have created the network, change your compose file to look as follows:\n\n  ```yaml\n  services:\n    windows:\n      container_name: windows\n      ..<snip>..\n      networks:\n        vlan:\n          ipv4_address: 192.168.0.100\n\n  networks:\n    vlan:\n      external: true\n  ```\n \n  An added benefit of this approach is that you won't have to perform any port mapping anymore, since all ports will be exposed by default.\n\n> [!IMPORTANT]  \n> This IP address won't be accessible from the Docker host due to the design of macvlan, which doesn't permit communication between the two. If this is a concern, you need to create a [second macvlan](https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/#host-access) as a workaround.\n\n### How can Windows acquire an IP address from my router?\n\n  After configuring the container for [macvlan](#how-do-i-assign-an-individual-ip-address-to-the-container), it is possible for Windows to become part of your home network by requesting an IP from your router, just like a real PC.\n\n  To enable this mode, add the following lines to your compose file:\n\n  ```yaml\n  environment:\n    DHCP: \"Y\"\n  devices:\n    - /dev/vhost-net\n  device_cgroup_rules:\n    - 'c *:* rwm'\n  ```\n\n> [!NOTE]  \n> In this mode, the container and Windows will each have their own separate IPs.\n\n### How do I add multiple disks?\n\n  To create additional disks, modify your compose file like this:\n  \n  ```yaml\n  environment:\n    DISK2_SIZE: \"32G\"\n    DISK3_SIZE: \"64G\"\n  volumes:\n    - /home/example:/storage2\n    - /mnt/data/example:/storage3\n  ```\n\n### How do I pass-through a disk?\n\n  It is possible to pass-through disk devices directly by adding them to your compose file in this way:\n\n  ```yaml\n  devices:\n    - /dev/sdb:/disk1\n    - /dev/sdc:/disk2\n  ```\n\n  Use `/disk1` if you want it to become your main drive (which will be formatted during installation), and use `/disk2` and higher to add them as secondary drives (which will stay untouched).\n\n### How do I pass-through a USB device?\n\n  To pass-through a USB device, first lookup its vendor and product id via the `lsusb` command, then add them to your compose file like this:\n\n  ```yaml\n  environment:\n    ARGUMENTS: \"-device usb-host,vendorid=0x1234,productid=0x1234\"\n  devices:\n    - /dev/bus/usb\n  ```\n\n> [!IMPORTANT]\n> If the device is a USB disk drive, please wait until after the installation is completed before connecting it. Otherwise the installation may fail, as the order of the disks can get rearranged.\n\n### How do I verify if my system supports KVM?\n\n  Only Linux and Windows 11 support KVM virtualization, macOS and Windows 10 do not unfortunately.\n  \n  You can run the following commands in Linux to check your system:\n\n  ```bash\n  sudo apt install cpu-checker\n  sudo kvm-ok\n  ```\n\n  If you receive an error from `kvm-ok` indicating that KVM cannot be used, please check whether:\n\n  - the virtualization extensions (`Intel VT-x` or `AMD SVM`) are enabled in your BIOS.\n\n  - you enabled \"nested virtualization\" if you are running the container inside a virtual machine.\n\n  - you are not using a cloud provider, as most of them do not allow nested virtualization for their VPS's.\n\n  If you do not receive any error from `kvm-ok` but the container still complains about KVM, please check whether:\n\n  - you are not using \"Docker Desktop for Linux\" as it does not support KVM, instead make use of Docker Engine directly.\n \n  - it could help to add `privileged: true` to your compose file (or `sudo` to your `docker run` command), to rule out any permission issue.\n\n### How do I run macOS in a container?\n\n  You can use [dockur/macos](https://github.com/dockur/macos) for that. It shares many of the same features, except for the automatic installation.\n\n### Is this project legal?\n\n  Yes, this project contains only open-source code and does not distribute any copyrighted material. Any product keys found in the code are just generic placeholders provided by Microsoft for trial purposes. So under all applicable laws, this project will be considered legal.\n\n## Stars 🌟\n[![Stars](https://starchart.cc/dockur/windows.svg?variant=adaptive)](https://starchart.cc/dockur/windows)\n\n## Disclaimer ⚖️\n\n*The product names, logos, brands, and other trademarks referred to within this project are the property of their respective trademark holders. This project is not affiliated, sponsored, or endorsed by Microsoft Corporation.*\n\n[build_url]: https://github.com/dockur/windows/\n[hub_url]: https://hub.docker.com/r/dockurr/windows/\n[tag_url]: https://hub.docker.com/r/dockurr/windows/tags\n[pkg_url]: https://github.com/dockur/windows/pkgs/container/windows\n\n[Build]: https://github.com/dockur/windows/actions/workflows/build.yml/badge.svg\n[Size]: https://img.shields.io/docker/image-size/dockurr/windows/latest?color=066da5&label=size\n[Pulls]: https://img.shields.io/docker/pulls/dockurr/windows.svg?style=flat&label=pulls&logo=docker\n[Version]: https://img.shields.io/docker/v/dockurr/windows/latest?arch=amd64&sort=semver&color=066da5\n[Package]: https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fipitio.github.io%2Fbackage%2Fdockur%2Fwindows%2Fwindows.json&query=%24.downloads&logo=github&style=flat&color=066da5&label=pulls\n",
  "homepage": "",
  "defaultBranch": "master",
  "hasIssues": true,
  "hasWiki": false,
  "license": "MIT License",
  "createdAt": "2024-01-14T13:09:40Z",
  "updatedAt": "2024-11-17T12:51:01Z",
  "pushedAt": "2024-11-15T04:18:02Z",
  "url": "https://github.com/dockur/windows",
  "gitUrl": "git://github.com/dockur/windows.git",
  "sshUrl": "git@github.com:dockur/windows.git",
  "owner": {
    "name": "dockur",
    "avatarUrl": "https://avatars.githubusercontent.com/u/133648939?v=4",
    "url": "https://github.com/dockur"
  }
}